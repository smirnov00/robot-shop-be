service: product-service

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  profile: epam
  region: eu-west-1

  vpc:
    securityGroupIds:
      - ${self:custom.secrets.vpc.security_group_id}
    subnetIds:
      - ${self:custom.secrets.vpc.subnet_id_1}
      - ${self:custom.secrets.vpc.subnet_id_2}

  environment:
    REGION: ${self:provider.region}
    PG_HOST: ${self:custom.secrets.pg.host}
    PG_DB_NAME: ${self:custom.secrets.pg.db_name}
    PG_USER: ${self:custom.secrets.pg.user}
    PG_PASSWORD: ${self:custom.secrets.pg.password}
    SQS_URL: ${cf:import-service-dev.ImportedProductsQueue}
    SNS_PRODUCTS_IMPORTED_TOPIC:
      Ref: SNSProductsImportedTopic

  iamRoleStatements:
    - Effect: "Allow"
      Action: "sns:*"
      Resource:
        Ref: SNSProductsImportedTopic
    - Effect: "Allow"
      Action: "ec2:*VpcEndpoint*"
      Resource: "*"

plugins:
  - serverless-webpack

custom:
  secrets: ${file('./secrets.json')}
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true  

functions:
  getProductsList:
    handler: src/handler.getProductsList
    events:
      - http:
          path: products
          method: get
          cors: true

  getProductById:
    handler: src/handler.getProductById
    events:
      - http:
          path: products/{productId}
          method: get
          cors: true
  
  createProduct:
    handler: src/handler.createProduct
    events:
      - http:
          path: products
          method: post
          cors: true

  catalogBatchProcess:
    handler: src/handler.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn: ${self:provider.environment.SQS_URL}

resources:
  Resources:
    AWSLambdaVPCAccessExecutionRole:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        Description: Creating policy for VPC connetion.
        Roles:
          - {"Ref" : "IamRoleLambdaExecution"}
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - ec2:CreateNetworkInterface
              - ec2:DescribeNetworkInterfaces
              - ec2:DeleteNetworkInterface
            Resource: "*"
    
    SNSProductsImportedTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: products-imported
    
    SNSProductsImportedSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${self:custom.secrets.adminEmail}
        Protocol: email
        TopicArn:
          Ref: SNSProductsImportedTopic